model2 = train(IL_training, method = "glm", preProcess = "pca", thresh = 0.8)
model2 = train(x = IL_training,y = training$diagnosis, method = "glm", preProcess = "pca", thresh = 0.8)
preproc = preProcess(IL_training,method = "pca", thresh = 0.8)
training_pca = predict(preproc, IL_training)
model2 = train(x = training_pca, y = training$diagnosis, method = "glm")
predictions1 = predict(model1, testing)
confusionMatrix(predictions1, testing$diagnosis)
predictions2 = predict(model2, testing)
testing_pca = predict(preproc, testing)
testing_pca = predict(preproc, testing)
View(testing)
testing_pca = predict(preproc, testing[,-testing$diagnosis])
testing$diagnosis
testing[,-2]
testing[,2]
View(testing)
testing[,1]
testing_pca = predict(preproc, testing[,-1])
dim(testing[,-1])
preproc = preProcess(IL_training,method = "pca", thresh = 0.8)
training_pca = predict(preproc, IL_training)
model2 = train(x = training_pca, y = training$diagnosis, method = "glm")
testing_pca = predict(preproc, testing[,-1])
preproc = preProcess(IL_training,method = "pca", thresh = 0.8)
testing_pca = predict(preproc, testing[,-1])
IL_testing = testing[,grep("^IL", names(testing))]
testing_pca = predict(preproc, testing)
testing_pca = predict(preproc, IL_testing)
predictions2 = predict(testing_pca, IL_testing)
predictions2 = predict(model2, testing_pca)
confusionMatrix(predictions2, testing$diagnosis)
confusionMatrix(predictions1, testing$diagnosis)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
names(segmentationOriginal)
names(segmentationOriginal)=="Case"
which(names(segmentationOriginal)=="Case")
summary(segmentationOriginal[,2])
training = segmentationOriginal[="Train",]
training = segmentationOriginal[2="Train",]
training = segmentationOriginal[2=="Train",]
training = segmentationOriginal[segmentationOriginal[,2]=="Train",]
testing = segmentationOriginal[segmentationOriginal[,2]=="Test",]
training$Class
modelFit = train(Class~., data = training, method = "rpart")
modelFit
predict(modelFit, c(TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2))
predict(modelFit, c(TotalIntench2 = 23.000, FiberWidthCh1 = 10, PerimStatusCh1=2))
predict(modelFit, c=(TotalIntench2 = 23.000, FiberWidthCh1 = 10, PerimStatusCh1=2))
predict(modelFit, c=(TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2))
predict(modelFit, c=("TotalIntench2 = 23000", "FiberWidthCh1 = 10", "PerimStatusCh1=2"))
t = data.frame(c(23000,10,2), row.names = c("TotalIntench2","FiberWidthCh1", "PerimStatusCh1" ))
predict(modelFit, t)
View(training)
t = testing[1,""]
t = testing[1,]
t[1,] = "NA"
t[1,] = "N"
t[1,] = NA
View(t)
t[1,] =
""
t[1,] = ""
t[1,] = "";
t[1,] = NA
View(t)
t[1,t$TotalIntenCh2] = 23000
t$TotalIntenCh2 = 23000
t$FiberWidthCh1 = 10
t$PerimStatusCh1 = 2
predict(modelFit, t)
modelFit$results$cp
modelFit$results
modelFit$trainingData
predValues = extractPrediction(modelFit)
predValues = extractPrediction(modelFit, testX = training)
predict(modelFit, testing)
predValues = extractPrediction(modelFit)
predictions = predict(modelFit, testing)
predValues = extractPrediction(predictions)
class(modelFit)
predValues = extractPrediction(modelFit,testX = testing)
predValues = extractPrediction(list(modelFit))
predValues = extractPrediction(list(predictions))
,testX = testing
predValues = extractPrediction(list(modelFit),testX = testing)
coef(modelFit)
set.seed(125)
modelFit = train(Class~., data = training, method = "rpart")
predValues = extractPrediction(list(modelFit))
View(testing)
predictions = predict(modelFit, testing[,-3])
predValues = extractPrediction(list(modelFit))
predValues = extractPrediction(list(modelFit))
predValues = extractPrediction(list(modelFit), testX = testing[,-3])
predValues = extractPrediction(list(modelFit), testX = testing[,-3], testY = testing[,3])
predValues = extractPrediction(list(modelFit), testX = testing[,-3], testY = testing[,3], verbose = T)
t$TotalIntenCh2 = 50000
t$FiberWidthCh1 = 10
t$VarIntenCh4 = 100
predictions = predict(modelFit, t)
predictions = predict(modelFit, testing)
predictions
testing[,testing$TotalIntenCh2==50000]
testing[,testing$TotalIntenCh2=="50000]
testing[,testing$TotalIntenCh2=="50000"]
testing[,testing$TotalIntenCh2=="50000"]
training[,training$TotalIntenCh2=="50000"]
training[,training$TotalIntenCh2==50000]
training[,training$TotalIntenCh2==50.000]
training[,training$TotalIntenCh2==50,000]
testing[,testing$TotalIntenCh2==50,000]
testing$TotalIntenCh2==50,000
testing$TotalIntenCh2==50000
sum(testing$TotalIntenCh2==50000)
sum(testing$TotalIntenCh2>=50000)
sum(testing$TotalIntenCh2>=23000)
sum(testing$TotalIntenCh2==23000)
sum(testing$TotalIntenCh2==57000)
library(pgmm)
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
View(olive)
names(olive)
model = train(Area~., method = "gbm")
model = train(Area~., data = olive, method = "gbm")
newdata = as.data.frame(t(colMeans(olive)))
predict(model, newdata)
newdata
predict(model, newdata[,-1])
model = train(Area~., data = olive, method = "tree")
model = train(Area~., data = olive, method = "rf")
predict(model, newdata[,-1])
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
names(trainSA)
model3 = train(chd~age+alcohol+obesity+tobacco+typea+ldl ,method = "glm", family = "binomial")
model3 = train(chd~age+alcohol+obesity+tobacco+typea+ldl, data = trainSA, method = "glm", family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
predictions3 = predict(model3, testSA)
model3
missClass(testSA[,9],predictions3)
testSA[,9]
missClass(predictions3,testSA[,9])
print(modelFit$finalModel)
library(rattle)
install.packages("rattle")
fancyRpartPlot(modelFit$finalModel)
library(rattle)
fancyRpartPlot(modelFit$finalModel)
install.packages("rpart.plot")
fancyRpartPlot(modelFit$finalModel)
predictions3
str(trainSA)
predictions3>0.5
testSA[,9]
testSA[,10]
missClass(testSA[,10],predictions3)
predictions3 = predict(model3, trainSA)
missClass(trainSA[,10],predictions3)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel.test)
factor(vowel.test$y)
str(vowel.test)
vowel.test$y = factor(vowel.test$y)
str(vowel.test)
vowel.train$y = factor(vowel.train$y)
str(vowel.test)
str(vowel.train)
set.seed(33833)
model4 = train(y~., data = vowel.train, method = "rf")
varImp(model4)
varImp(model4, scale = F)
model5 = train(y~., data = vowel.test, method = "rf")
varImp(model5, scale = F)
getwd()
open.csv("What influenced students to choose Business Administration course in Westminster International University in Tashkent depending on gender- (Ответы) - Ответы на форму (1)")
f = read.csv("What influenced students to choose Business Administration course in Westminster International University in Tashkent depending on gender- (Ответы) - Ответы на форму (1)")
f = read.csv("C://Users//Timur//Documents//What influenced students to choose Business Administration course in Westminster International University in Tashkent depending on gender- (Ответы) - Ответы на форму (1)")
f = read.csv("C://Users//Timur//Documents//Z.csv")
head(f)
dim(f)
f = read.csv("C://Users//Timur//Documents//Z.csv", header=T)
head(f)
hist(f$What.level.are.you.studying.in.)
hist(f$How.do.you.think.your.father.influenced.you.to.choose.BA.)
summary(f)
hist(f$How.do.you.think.your.father.influenced.you.to.choose.BA., col=f$Please.indicate.your.geneder)
q=qplot(data=f, geom="boxplo")
library(qplot)
library(ggplot2)
q=qplot(data=f, geom="boxplot")
q
q=qplot(x=names(f), y=c(1:40), data=f, geom="boxplot")
q
qplot(names(f)~c(1:40), data=f, geom="boxplot")
qplot(f$How.do.you.think.your.father.influenced.you.to.choose.BA.~f$How.do.you.think.your.mother.influenced.you.to.choose.BA., data=f, geom="boxplot")
qplot(How.do.you.think.your.father.influenced.you.to.choose.BA., How.do.you.think.your.mother.influenced.you.to.choose.BA., data=f, geom="boxplot")
qplot(f[,9]~f[,8:19], data=f, geom="boxplot")
qplot(f[,9],f[,8:19], data=f, geom="boxplot")
boxplot(f)
boxplot(f[,8:19])
boxplot(f[,8:19], las=2)
boxplot(f[,8:19], las=2, names=c(A:L))
boxplot(f[,8:19], las=2, names=c("A":"L"))
boxplot(f[,8:19], las=2, names=c(1:12))
boxplot(f[,8:19],  names=c(1:12))
boxplot(f[,8:19],  names=c(8:19))
boxplot(f[,8:19],  names=c(8:19),ylim=1:10)
boxplot(f[,8:19],  names=c(8:19),ylim=c(1:10))
boxplot(f[,8:19],  names=c(8:19),ylim=c(1,10))
boxplot(f[,8:19],  names=c(8:19),pars(list(ylim=c(1,10))))
boxplot(f[,8:19],  names=c(8:19),pars=list(ylim=c(1,10)))
jpeg("boxplot.jpeg")
boxplot(f[,8:19],  names=c(8:19),pars=list(ylim=c(1,10)))
dev.off()
qplot(f[,8:19], data=f, geom="boxplot")
qplot(f[,8:19],aes(f[,8],f[,9]), data=f, geom="boxplot")
qplot(f[,8:19],aes(f[,8],f[,9]), geom="boxplot")
plot(f[,8],f[,9])
plot(f[,8],f[,9],col=f$Please.indicate.your.geneder)
boxplot(f[,8:19],  names=c(8:19),pars=list(ylim=c(1,10)), col=colors)
boxplot(f[,8:19],  names=c(8:19),pars=list(ylim=c(1,10)), col=8:19)
jpeg("boxplot.jpeg")
boxplot(f[,8:19],  names=c(8:19),pars=list(ylim=c(1,10)), col=8:19)
dev.off()
mean(f[,8:19])
table.freq(f)
apply(f[,8:19], 2 mean)
apply(f[,8:19], 2, mean)
plot(apply(f[,8:19], 2, mean))
qplot(f[,3]~f[,8], geom="boxplot")
qplot(~f[,8], geom="boxplot")
qplot(~f[,8], data = f, geom="boxplot")
qplot(x=f[,3],y=f[,8], data = f, geom="boxplot")
qplot(x=f[,3],y=f[,8:9], data = f, geom="boxplot")
qplot(x=f[,3],y=f[,8], data = f, geom="boxplot")
boxplot(f[,8:19],fill=f[,3],  names=c(8:19),pars=list(ylim=c(1,10)), col=8:19)
boxplot(f[,8:19],fill=f[,3],  names=c(8:19),pars=list(ylim=c(1,10)))
boxplot(f[,8:19],fill=f[,3]  names=c(8:19),pars=list(ylim=c(1,10)), col=8:19)
boxplot(f[,8:19],  names=c(8:19),pars=list(ylim=c(1,10)), col=8:19)
qplot(x=f[,3],y=f[,8], data = f, geom="boxplot")
plot(apply(f[,8:19], 2, mean))
hist(apply(f[,8:19], 2, mean))
qplot(x=f[,3],y=f[,8], data = f, geom="boxplot")
qplot(x=f[,3],y=f[,8], data = f, geom="boxplot", fill=f[,3])
jpeg("boxplot_gender_vs._f8.jpeg")
qplot(x=f[,3],y=f[,8], data = f, geom="boxplot", fill=f[,3])
dev.off()
qplot(x=f[,3],y=f[,2], data = f, geom="boxplot", fill=f[,3])
qplot(x=f[,3],y=f[,4], data = f, geom="boxplot", fill=f[,3])
qplot(x=f[,3],y=f[,5], data = f, geom="boxplot", fill=f[,3])
qplot(x=f[,3],y=f[,6], data = f, geom="boxplot", fill=f[,3])
qplot(x=f[,3],y=f[,7], data = f, geom="boxplot", fill=f[,3])
qplot(x=f[,3],y=f[,8], data = f, geom="boxplot", fill=f[,3])
qplot(x=f[,3],y=f[,9], data = f, geom="boxplot", fill=f[,3])
jpeg("boxplot_gender_vs._f9.jpeg")
qplot(x=f[,3],y=f[,9], data = f, geom="boxplot", fill=f[,3])
dev.off()
jpeg("boxplot_gender_vs._f10.jpeg")
qplot(x=f[,3],y=f[,10], data = f, geom="boxplot", fill=f[,3])
dev.off()
jpeg("boxplot_gender_vs._f11.jpeg")
qplot(x=f[,3],y=f[,11], data = f, geom="boxplot", fill=f[,3])
dev.off()
jpeg("boxplot_gender_vs._f12.jpeg")
qplot(x=f[,3],y=f[,12], data = f, geom="boxplot", fill=f[,3])
dev.off()
jpeg("boxplot_gender_vs._f13.jpeg")
qplot(x=f[,3],y=f[,13], data = f, geom="boxplot", fill=f[,3])
dev.off()
jpeg("boxplot_gender_vs._f14.jpeg")
qplot(x=f[,3],y=f[,14], data = f, geom="boxplot", fill=f[,3])
dev.off()
jpeg("boxplot_gender_vs._f15.jpeg")
qplot(x=f[,3],y=f[,15], data = f, geom="boxplot", fill=f[,3])
dev.off()
jpeg("boxplot_gender_vs._f16.jpeg")
qplot(x=f[,3],y=f[,16], data = f, geom="boxplot", fill=f[,3])
dev.off()
jpeg("boxplot_gender_vs._f17.jpeg")
qplot(x=f[,3],y=f[,17], data = f, geom="boxplot", fill=f[,3])
dev.off()
jpeg("boxplot_gender_vs._f18.jpeg")
qplot(x=f[,3],y=f[,18], data = f, geom="boxplot", fill=f[,3])
dev.off()
jpeg("boxplot_gender_vs._f19.jpeg")
qplot(x=f[,3],y=f[,19], data = f, geom="boxplot", fill=f[,3])
dev.off()
plot(f[,8],f[,9],col=f$Please.indicate.your.geneder)
hist(apply(f[,8:19], 2, mean))
hist(apply(f[,8:19], 2, mean), xlim=c(1,10))
apply(f[,8:19], 2, mean)
m = apply(f[,8:19], 2, mean)
length(m)
m
names(m)=null
names(m)=NULL
m
plot(apply(f[,8:19], 2, mean), xlim=c(1,10))
plot(apply(f[,8:19], 2, mean)
plot(apply(f[,8:19], 2, mean, type="l")
plot(apply(f[,8:19], 2, mean), type="l")
plot(apply(f[,8:19], 2, mean), type="b")
plot(apply(f[,8:19], 2, mean), type="c")
plot(apply(f[,8:19], 2, mean), type="h")
plot(apply(f[,8:19], 2, mean), type="s")
plot(apply(f[,8:19], 2, mean), type="h")
plot(apply(f[,8:19], 2, mean), type=c("h","c"))
plot(apply(f[,8:19], 2, mean), type="h")
plot(apply(f[,8:19], 2, mean), type="b")
plot(apply(f[,8:19], 2, mean), type="b", ylim=c(1,10))
plot(apply(f[,8:19], 2, mean), type="b", ylim=c(1,10), xlim=c(8:19))
plot(apply(f[,8:19], 2, mean), type="b", ylim=c(1,10), xlim=c(8,19))
plot(apply(f[,8:19], 2, mean), type="b", ylim=c(1,10), names=c(8,19))
plot(apply(f[,8:19], 2, mean), type="b", ylim=c(1,10)
jpeg("means.jpeg")
plot(apply(f[,8:19], 2, mean), type="b", ylim=c(1,10)
dev.off()
plot(apply(f[,8:19], 2, mean), type="b", ylim=c(1,10))
dev.off()
jpeg("means.jpeg")
plot(apply(f[,8:19], 2, mean), type="b", ylim=c(1,10))
dev.off()
plotmeans(f[,3],f[,8])
plotmeans(f[,3]~f[,8])
library(gplots)
install.packages("gplots")
library(gplots)
plotmeans(f[,3]~f[,8])
barplot(apply(f[,8:19], 2, mean), type="b", ylim=c(1,10))
barplot(apply(f[,8:19], 2, mean), )
barplot(apply(f[,8:19], 2, mean), col=1:12 )
barplot(apply(f[,8:19], 2, mean), col=1:12 , xlab="asd")
barplot(apply(f[,8:19], 2, mean))
jpeg("means2.jpeg")
barplot(apply(f[,8:19], 2, mean))
dev.off()
barplot(apply(f[,8:19], 2, sd))
jpeg("means2.jpeg")
jpeg("standard_deviation.jpeg")
barplot(apply(f[,8:19], 2, sd))
dev.off()
barplot(f[,8],f[,9])
barplot(apply(f[,8:19], 2, mean))
dev.off()
dev.off()
jpeg("means2.jpeg")
barplot(apply(f[,8:19], 2, mean))
dev.off()
library(corrplot)
install.packages("corrplot")
corr = cor(scale(f[,8:19], center=T, scale=T))
corrplot(corr, order="hclust")
library(corrplot)
corrplot(corr, order="hclust")
corrplot(corr, method="circle")
jpeg("corr.jpeg")
corrplot(corr, method="circle")
dev.off()
names(f)=NULL
corr = cor(scale(f[,8:19], center=T, scale=T))
corrplot(corr, method="circle")
corrplot.mixed(corr)
jpeg("corr.jpeg")
corrplot.mixed(corr)
dev.off()
qt(0.975,9)
qt(0.975,8)
help(qt)
qt(0.975,16)
qt(0.975,18)
9*0.6^2+9*0.68^2
sqrt((9*0.6^2+9*0.68^2)/18)
sqrt((9*0.6^2+9*0.68^2)/18)/sqrt(5)
sqrt((9*0.6^2+9*0.68^2)/18)/sqrt(5)*2.1
sqrt((9*(0.6^2)+9*0.68^2)/18)/sqrt(5)*2.1
qt(0.9, 20)
qt(0.95, 20)
qt(0.05, 20)
qt(0.975,18.66)
qt(0.95,15.5)
qt(0.975,8)
6/qt(0.975,8)*sqrt(2)
6/qt(0.975,16)*sqrt(2)
6/qt(0.975,16)
6/qt(0.975,8)
(9*0.6+9*0.68)/18
sqrt((9*0.6+9*0.68)/18)
-2+2.1*0.8/sqrt(5)
-2-2.1*0.8/sqrt(5)
qt(0.95,10)
qt(0.9,10)
(0.5^2)
(sqrt(0.5^2/100+4/100))/((0.5^2/100)^2/99 + (4/100)^2/99)
((0.5^2/100+4/100)^2)/((0.5^2/100)^2/99 + (4/100)^2/99)
qt(0.975, ((0.5^2/100+4/100)^2)/((0.5^2/100)^2/99 + (4/100)^2/99))
-2+qt(0.975, ((0.5^2/100+4/100)^2)/((0.5^2/100)^2/99 + (4/100)^2/99)) * sqrt(0.5^2/100+4/100)
-2-qt(0.975, ((0.5^2/100+4/100)^2)/((0.5^2/100)^2/99 + (4/100)^2/99)) * sqrt(0.5^2/100+4/100)
4+0.2*1.645
1/20
1/20*1.645
2/1/20
2/0.05
data(mtcars)
load(mtcars)
head(mtcars)
qnorm(0.975,mtcars$mpg)
mean = mean(mtcars$mpg)
sd = sd(mtcars$mpg)
mean+qnorm(0.975,mean = mean, sd = sd)*sd
mean-qnorm(0.975,mean = mean, sd = sd)*sd
qnorm(0.975,mean = mean, sd = sd)
qnorm(1-0.975,mean = mean, sd = sd)
qt(1-0.975,mean = mean, sd = sd)
qnorm(1-0.975,nrow(mtcars$mpg))
nrow(mtcars$mpg)
nrow(mtcars)
qnorm(1-0.975,nrow(mtcars))
qnorm(0.975,nrow(mtcars))
mean+qnorm(0.975,nrow(mtcars))*sd/sqrt(nrow(mtcars))
mean+qt(0.975,nrow(mtcars))*sd/sqrt(nrow(mtcars))
mean-qt(0.975,nrow(mtcars))*sd/sqrt(nrow(mtcars))
qt(0.975,8)
qt(1-0.975,8)
qt(1-0.975,8)/9
qt(0.975,8)/9
qt(0.975,8)/3
head(mtcars)
rexp(40, 0.2)
hist(rexp(40, 0.2))
hist(rexp(40, 0.2))
hist(rexp(40, 0.2))
hist(rexp(40, 0.2))
hist(rexp(40, 0.2))
mns=NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
hist(mns)
for (i in 1 : 1000) mns = c(mns, mean(rexp(40)))
hist(mns)
for (i in 1 : 1000) mns = c(mns, mean(rexp(40)))
hist(mns)
for (i in 1 : 1000) mns = c(mns, mean(rexp(40, 0.2)))
hist(mns)
mns=NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40, 0.2)))
hist(mns)
setwd("D:\\DOCS\\Kaggle\\OTTO\\models")
load("rf_repeatedcv_pca99")
setwd("D:\\DOCS\\Kaggle\\mnist\\models")
load("rf_repeatedcv_pca99")
modelFit
library(kernlab)
library(caret)
library(foreach)
library(doParallel)
training = read.csv("train.csv", header = T, na.string=c("","NA"));
setwd("D:\\DOCS\\kaggle\\MNIST")
training = read.csv("train.csv", header = T, na.string=c("","NA"));
target = training[,1]
training = training[,-1]
training[,"target"] = as.factor(target)
nzv_features = nearZeroVar(training)#, freqCut = 30)
training = training[,-nzv_features]
inTrain = createDataPartition(y=training$target, p=0.75, list=FALSE)
cv = training[-inTrain,]
training = training[inTrain,]
predictions = predict(modelFit, newdata = cv)
confusionMatrix(predictions, cv$target)
predictions = predict(modelFit, newdata = training)
confusionMatrix(predictions, training$target)
modelFit$method
modelFit$modelInfo
modelFit$modelInfo$parameters
modelFit$modelType
modelFit$bestTune
modelFit$results
modelFit$finalModel
predictions = predict(modelFit, newdata = cv)
confusionMatrix(predictions, cv$target)
training = read.csv("train.csv", header = T, na.string=c("","NA"));
testing = read.csv("test.csv", header = T, na.string=c("","NA"));
target = training[,1]
training = training[,-1]
training[,"target"] = as.factor(target)
inTrain = createDataPartition(y=training$target, p=0.75, list=FALSE)
cv = training[-inTrain,]
training = training[inTrain,]
zeroCols = unique(c(which(apply(training==0,2,all)), which(apply(cv==0,2,all)), which(apply(testing==0,2,all))))
training = training[, -zeroCols]
cv = cv[, -zeroCols]
testing = testing[, -zeroCols]
dim(training[,-training$target])
-training$target
training$target
dim(training[,-"target"])
dim(training[,-("target")])
dim(training[,-ncol(training)])
preProc = preProcess(training[,-ncol(training)], method = "pca",thresh = 0.99)
preProc
